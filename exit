[1mdiff --git a/sheng-ru/experiment/123.pcap b/sheng-ru/experiment/123.pcap[m
[1mdeleted file mode 100644[m
[1mindex 7bba817..0000000[m
Binary files a/sheng-ru/experiment/123.pcap and /dev/null differ
* Unmerged path sheng-ru/experiment/server.py
[1mdiff --git a/sheng-ru/experiment/server.py b/sheng-ru/experiment/server.py[m
[1mdeleted file mode 100644[m
[1mindex 919e693..0000000[m
[1m--- a/sheng-ru/experiment/server.py[m
[1m+++ /dev/null[m
[36m@@ -1,192 +0,0 @@[m
[31m-#!/usr/bin/env python3[m
[31m-# -*- coding: utf-8 -*-[m
[31m-import socket[m
[31m-import argparse[m
[31m-import sys[m
[31m-import time[m
[31m-import signal[m
[31m-import subprocess[m
[31m-import os[m
[31m-import threading[m
[31m-import multiprocessing[m
[31m-[m
[31m-# Default parameter[m
[31m-HOST = '0.0.0.0' # 140.112.20.183[m
[31m-PORT = 3250[m
[31m-pcap_path = '/home/wmnlab/D/sheng-ru/ntu-experiments/sheng-ru/experiment/123.pcap'[m
[31m-[m
[31m-#====================argument parsing==============================[m
[31m-parser = argparse.ArgumentParser()[m
[31m-parser.add_argument("-p", "--port", type=int,[m
[31m-                    help="port to bind", default=PORT)[m
[31m-parser.add_argument("-l", "--length", type=int,[m
[31m-                    help="payload length", default=250)[m
[31m-parser.add_argument("-b", "--bandwidth", type=int,[m
[31m-                    help="data rate (bits per second)", default=200000)   [m
[31m-parser.add_argument("-t", "--time", type=int,[m
[31m-                    help="maximum experiment time", default=3600)[m
[31m-[m
[31m-args = parser.parse_args()[m
[31m-s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)[m
[31m-s.bind((HOST, args.port))[m
[31m-[m
[31m-length_packet = args.length[m
[31m-bandwidth = args.bandwidth[m
[31m-total_time = args.time[m
[31m-[m
[31m-expected_packet_per_sec = bandwidth / (length_packet << 3)[m
[31m-sleeptime = 1.0 / expected_packet_per_sec[m
[31m-[m
[31m-#==================================================================[m
[31m-print('server start at: %s:%s' % (HOST, args.port))[m
[31m-print('wait for connection...')[m
[31m-tcpdumpproc = subprocess.Popen([f"tcpdump -i any port {args.port} -w {pcap_path}"],[m
[31m-            shell=True, start_new_session=True)[m
[31m-[m
[31m-# Transmit function define[m
[31m-seq = 1[m
[31m-prev_transmit = 1[m
[31m-[m
[31m-start_time = time.time()[m
[31m-next_transmit_time = start_time + sleeptime[m
[31m-[m
[31m-udp_addrs = {}[m
[31m-[m
[31m-def transmit():[m
[31m-    [m
[31m-    global start_time, seq, prev_transmit, next_transmit_time, udp_addrs[m
[31m-    time_slot = 1[m
[31m-[m
[31m-    while time.time() - start_time < total_time:[m
[31m-[m
[31m-        t = time.time()[m
[31m-        while t < next_transmit_time:[m
[31m-            t = time.time()[m
[31m-        next_transmit_time = next_transmit_time + sleeptime[m
[31m-[m
[31m-        datetimedec = int(t)[m
[31m-        microsec = int((t - int(t))*1000000)[m
[31m-[m
[31m-        redundant = os.urandom(length_packet-4*3)[m
[31m-        outdata = datetimedec.to_bytes(4, 'big') + microsec.to_bytes(4, 'big') + seq.to_bytes(4, 'big') + redundant[m
[31m-        [m
[31m-        for i in udp_addrs:[m
[31m-            s.sendto(outdata, udp_addrs[i]) ## ?????[m
[31m-            print('yes')[m
[31m-[m
[31m-        seq += 1[m
[31m-[m
[31m-        if time.time() - start_time > time_slot:[m
[31m-            print("[%d-%d]"%(time_slot-1, time_slot), "transmit", seq-prev_transmit, f'| seq: {seq}')[m
[31m-            time_slot += 1[m
[31m-            prev_transmit = seq[m
[31m-            print(udp_addrs)[m
[31m-[m
[31m-# Receive function define[m
[31m-[m
[31m-def receive():[m
[31m-    [m
[31m-    global udp_addrs[m
[31m-    time_slot = 1[m
[31m-    max_seq = 1[m
[31m-    prev_recv = 1[m
[31m-    [m
[31m-    while True:[m
[31m-        [m
[31m-        try:[m
[31m-            indata, addr = s.recvfrom(1024)[m
[31m-            udp_addrs[0] = addr[m
[31m-[m
[31m-            try: start_recieve_time[m
[31m-            except NameError: [m
[31m-                start_recieve_time = time.time()[m
[31m-            if len(indata) != length_packet:[m
[31m-                print("packet with strange length: ", len(indata))[m
[31m-[m
[31m-            rec_seq = int(indata.hex()[16:24], 16)[m
[31m-            max_seq = max(max_seq, rec_seq)[m
[31m-            ts = int(int(indata.hex()[0:8], 16)) + float("0." + str(int(indata.hex()[8:16], 16)))[m
[31m-[m
[31m-            if time.time()-start_recieve_time > time_slot:[m
[31m-                print("[%d-%d]"%(time_slot-1, time_slot), "recieve", rec_seq-prev_recv, f'| seq: {rec_seq}')[m
[31m-                time_slot += 1[m
[31m-                prev_recv = rec_seq[m
[31m-                print(udp_addrs)[m
[31m-[m
[31m-        except Exception:[m
[31m-            print('STOP')[m
[31m-        [m
[31m-# Receive process[m
[31m-p1 = multiprocessing.Process(target = receive)[m
[31m-p1.start()[m
[31m-[m
[31m-# Transmit process[m
[31m-p2 = multiprocessing.Process(target = transmit)[m
[31m-p2.start()[m
[31m-[m
[31m-try:[m
[31m-    while 1:[m
[31m-        time.sleep(.1)[m
[31m-except KeyboardInterrupt:[m
[31m-    p2.terminate()[m
[31m-    print("Terminate transmit process.")[m
[31m-    p1.terminate()[m
[31m-    print("Terminate receive process.")[m
[31m-    os.killpg(os.getpgid(tcpdumpproc.pid), signal.SIGTERM)[m
[31m-    print("Kill tcpdump process.")[m
[31m-    s.close()[m
[31m-[m
[31m-# while True:[m
[31m-#     try:[m
[31m-#         # Receive[m
[31m-#         indata, addr = s.recvfrom(1024)[m
[31m-#         print(addr)[m
[31m-[m
[31m-#         try: start_time[m
[31m-#         except NameError: [m
[31m-#             start_time = time.time()[m
[31m-[m
[31m-#         if len(indata) != length_packet:[m
[31m-#             print("packet with strange length: ", len(indata))[m
[31m-[m
[31m-#         seq = int(indata.hex()[16:24], 16)[m
[31m-#         max_seq = max(max_seq, seq)[m
[31m-#         ts = int(int(indata.hex()[0:8], 16)) + float("0." + str(int(indata.hex()[8:16], 16)))[m
[31m-[m
[31m-#         if time.time()-start_time > time_slot:[m
[31m-#             print("[%d-%d]"%(time_slot-1, time_slot), "recieve", seq-prev_transmit, f'| seq: {seq}')[m
[31m-#             time_slot += 1[m
[31m-            [m
[31m-#             prev_transmit = seq[m
[31m-    [m
[31m-#     except KeyboardInterrupt:[m
[31m-#         os.killpg(os.getpgid(p.pid), signal.SIGTERM)[m
[31m-#         s.close()[m
[31m-#         sys.exit()[m
[31m-[m
[31m-#     except:[m
[31m-#         pass[m
[31m-[m
[31m-[m
[31m-[m
[31m-# def transmit(total_time):[m
[31m-[m
[31m-#     start_time = time.time()[m
[31m-#     next_transmit_time = start_time + sleeptime[m
[31m-[m
[31m-#     while time.time() - start_time < total_time:[m
[31m-[m
[31m-#         try:[m
[31m-#             # Transmit[m
[31m-#             t = time.time()[m
[31m-#             while t < next_transmit_time:[m
[31m-#                 t = time.time()[m
[31m-#             next_transmit_time = start_time + sleeptime[m
[31m-[m
[31m-#             datetimedec = int(t)[m
[31m-#             microsec = int((t-int(t))*1000000)[m
[31m-[m
[31m-#             redundant = os.urandom(length_packet-4*3)[m
[31m-#             outdata = datatimedec.to_bytes(4, 'big') + microsec.to_bytes(4, 'big') + seq.to_bytes(4, 'big') + redundant[m
[31m-[m
[31m-#             s.sendto(outdata, udp_addr[1])[m
\ No newline at end of file[m
* Unmerged path sheng-ru/post_processing/test.ipynb
[1mdiff --git a/sheng-ru/post_processing/test.ipynb b/sheng-ru/post_processing/test.ipynb[m
[1mdeleted file mode 100644[m
[1mindex c7fe9ff..0000000[m
[1m--- a/sheng-ru/post_processing/test.ipynb[m
[1m+++ /dev/null[m
[36m@@ -1,605 +0,0 @@[m
[31m-{[m
[31m- "cells": [[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 8,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "import pandas as pd\n",[m
[31m-    "import datetime as dt\n",[m
[31m-    "import swifter\n",[m
[31m-    "from collections import namedtuple\n",[m
[31m-    "import matplotlib.pyplot as plt\n",[m
[31m-    "import numpy as np\n",[m
[31m-    "import csv\n",[m
[31m-    "import ast"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": null,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "x = input('lll:')\n",[m
[31m-    "while True:\n",[m
[31m-    "    "[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 9,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "'Thu Feb  2 20:09:59 2023'"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 9,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "import time\n",[m
[31m-    "x = time.ctime()\n",[m
[31m-    "x"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 13,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "x = dt.datetime.now().replace(microsecond=0)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 19,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "datetime.datetime(2023, 2, 2, 20, 29, 25)"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 19,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "y = dt.datetime.now().replace(microsecond=0)\n",[m
[31m-    "y"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 16,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "5.0"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 16,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "(y-x).total_seconds()"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 6,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "['time', 'type_id', 'PCI', 'RSRP(dBm)', 'RSRQ(dB)', 'Serving Cell Index', 'EARFCN', 'Number of Neighbor Cells', 'Number of Detected Cells', 'PCI1', 'LTE_RSRP1', 'LTE_RSRQ1']\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "x = \"/home/wmnlab/diag_log_sm07_2022-12-22_16-55-29_rrc.csv\"\n",[m
[31m-    "f = open(x)\n",[m
[31m-    "data = csv.reader(f)\n",[m
[31m-    "row0 = next(data)\n",[m
[31m-    "print(row0)    "[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 1,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "x = '<msg>\\n<packet>\\n  <proto name=\"geninfo\" pos=\"0\" showname=\"General information\" size=\"17\">\\n    <field name=\"num\" pos=\"0\" show=\"0\" showname=\"Number\" value=\"0\" size=\"17\"/>\\n    <field name=\"len\" pos=\"0\" show=\"17\" showname=\"Frame Length\" value=\"11\" size=\"17\"/>\\n    <field name=\"caplen\" pos=\"0\" show=\"17\" showname=\"Captured Length\" value=\"11\" size=\"17\"/>\\n    <field name=\"timestamp\" pos=\"0\" show=\"(0)Jan  1, 1970 08:00:00.000000000 CST\" showname=\"Captured Time\" value=\"0.000000000\" size=\"17\"/>\\n  </proto>\\n  <proto name=\"frame\" showname=\"Frame 0: 17 bytes on wire (136 bits), 17 bytes captured (136 bits)\" size=\"17\" pos=\"0\">\\n    <field name=\"frame.encap_type\" showname=\"Encapsulation type: USER 1 (46)\" size=\"0\" pos=\"0\" show=\"46\"/>\\n    <field name=\"frame.number\" showname=\"Frame Number: 0\" size=\"0\" pos=\"0\" show=\"0\"/>\\n    <field name=\"frame.len\" showname=\"Frame Length: 17 bytes (136 bits)\" size=\"0\" pos=\"0\" show=\"17\"/>\\n    <field name=\"frame.cap_len\" showname=\"Capture Length: 17 bytes (136 bits)\" size=\"0\" pos=\"0\" show=\"17\"/>\\n    <field name=\"frame.marked\" showname=\"Frame is marked: False\" size=\"0\" pos=\"0\" show=\"0\"/>\\n    <field name=\"frame.ignored\" showname=\"Frame is ignored: False\" size=\"0\" pos=\"0\" show=\"0\"/>\\n    <field name=\"frame.protocols\" showname=\"Protocols in frame: user_dlt:aww:lte_rrc\" size=\"0\" pos=\"0\" show=\"user_dlt:aww:lte_rrc\"/>\\n  </proto>\\n  <proto name=\"user_dlt\" showname=\"DLT: 148, Payload: aww (Automator Wireshark Wrapper)\" size=\"17\" pos=\"0\"/>\\n  <proto name=\"aww\" showname=\"Automator Wireshark Wrapper\" size=\"17\" pos=\"0\">\\n    <field name=\"aww.proto\" showname=\"Protocol: 200\" size=\"4\" pos=\"0\" show=\"200\" value=\"000000c8\"/>\\n    <field name=\"aww.data_len\" showname=\"Data length: 9\" size=\"4\" pos=\"4\" show=\"9\" value=\"00000009\"/>\\n  </proto>\\n  <proto name=\"lte_rrc\" showname=\"LTE Radio Resource Control (RRC) protocol\" hide=\"yes\" size=\"9\" pos=\"8\"/>\\n  <proto name=\"fake-field-wrapper\">\\n    <field name=\"lte-rrc.PCCH_Message_element\" showname=\"PCCH-Message\" size=\"6\" pos=\"8\" show=\"\" value=\"\">\\n      <field name=\"per.choice_index\" showname=\"Choice Index: 0\" hide=\"yes\" size=\"1\" pos=\"8\" show=\"0\" value=\"40\"/>\\n      <field name=\"lte-rrc.message\" showname=\"message: c1 (0)\" size=\"6\" pos=\"8\" show=\"0\" value=\"40001c33ba02\">\\n        <field name=\"lte-rrc.c1\" showname=\"c1: paging (0)\" size=\"6\" pos=\"8\" show=\"0\" value=\"40001c33ba02\">\\n          <field name=\"lte-rrc.paging_element\" showname=\"paging\" size=\"6\" pos=\"8\" show=\"\" value=\"\">\\n            <field name=\"per.optional_field_bit\" showname=\".1.. .... Optional Field Bit: True (pagingRecordList is present)\" hide=\"yes\" size=\"1\" pos=\"8\" show=\"1\" value=\"1\" unmaskedvalue=\"40\"/>\\n            <field name=\"per.optional_field_bit\" showname=\"..0. .... Optional Field Bit: False (systemInfoModification is NOT present)\" hide=\"yes\" size=\"1\" pos=\"8\" show=\"0\" value=\"0\" unmaskedvalue=\"40\"/>\\n            <field name=\"per.optional_field_bit\" showname=\"...0 .... Optional Field Bit: False (etws-Indication is NOT present)\" hide=\"yes\" size=\"1\" pos=\"8\" show=\"0\" value=\"0\" unmaskedvalue=\"40\"/>\\n            <field name=\"per.optional_field_bit\" showname=\".... 0... Optional Field Bit: False (nonCriticalExtension is NOT present)\" hide=\"yes\" size=\"1\" pos=\"8\" show=\"0\" value=\"0\" unmaskedvalue=\"40\"/>\\n            <field name=\"per.sequence_of_length\" showname=\"Sequence-Of Length: 1\" hide=\"yes\" size=\"1\" pos=\"8\" show=\"1\" value=\"40\"/>\\n            <field name=\"lte-rrc.pagingRecordList\" showname=\"pagingRecordList: 1 item\" size=\"5\" pos=\"9\" show=\"1\" value=\"001c33ba02\">\\n              <field name=\"\" show=\"Item 0\" size=\"5\" pos=\"9\" value=\"001c33ba02\">\\n                <field name=\"lte-rrc.PagingRecord_element\" showname=\"PagingRecord\" size=\"5\" pos=\"9\" show=\"\" value=\"\">\\n                  <field name=\"per.extension_bit\" showname=\".0.. .... Extension Bit: False\" hide=\"yes\" size=\"1\" pos=\"9\" show=\"0\" value=\"0\" unmaskedvalue=\"00\"/>\\n                  <field name=\"per.extension_bit\" showname=\"..0. .... Extension Bit: False\" hide=\"yes\" size=\"1\" pos=\"9\" show=\"0\" value=\"0\" unmaskedvalue=\"00\"/>\\n                  <field name=\"per.choice_index\" showname=\"Choice Index: 0\" hide=\"yes\" size=\"1\" pos=\"9\" show=\"0\" value=\"00\"/>\\n                  <field name=\"lte-rrc.ue_Identity\" showname=\"ue-Identity: s-TMSI (0)\" size=\"5\" pos=\"9\" show=\"0\" value=\"001c33ba02\">\\n                    <field name=\"lte-rrc.s_TMSI_element\" showname=\"s-TMSI\" size=\"5\" pos=\"9\" show=\"\" value=\"\">\\n                      <field name=\"lte-rrc.mmec\" showname=\"mmec: 01 [bit length 8, 0000 0001 decimal value 1]\" size=\"1\" pos=\"9\" show=\"01\" value=\"01\"/>\\n                      <field name=\"lte-rrc.m_TMSI\" showname=\"m-TMSI: c33ba02a [bit length 32, 1100 0011  0011 1011  1010 0000  0010 1010 decimal value 3275464746]\" size=\"4\" pos=\"9\" show=\"c3:3b:a0:2a\" value=\"c33ba02a\"/>\\n                    </field>\\n                  </field>\\n                  <field name=\"per.enum_index\" showname=\"Enumerated Index: 0\" hide=\"yes\" size=\"1\" pos=\"14\" show=\"0\" value=\"a0\"/>\\n                  <field name=\"lte-rrc.cn_Domain\" showname=\"cn-Domain: ps (0)\" size=\"1\" pos=\"14\" show=\"0\" value=\"a0\"/>\\n                </field>\\n              </field>\\n            </field>\\n          </field>\\n        </field>\\n      </field>\\n  </field>\\n  </proto>\\n</packet>\\n\\n</msg>\\n'"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 7,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "['', '</msg>']\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "print(x.split('\\n'))"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 12,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "class abc():\n",[m
[31m-    "    def __init__(self, a:str, b:str):\n",[m
[31m-    "        self.a = a\n",[m
[31m-    "        self.b = b"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 111,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "# f = \"/home/wmnlab/diag_log_sm05_2022-12-22_15-02-55.txt_rrc.csv\"\n",[m
[31m-    "f = \"/home/wmnlab/Code_Test_Space/sheng-ru/2022-12-22/_Bandlock_Udp_B1_B3/sm05/#03/middle/diag_log_sm05_2022-12-22_15-19-32.txt_rrc.csv\"\n",[m
[31m-    "df = pd.read_csv(f)\n",[m
[31m-    "df[\"time\"] = df[\"time\"].swifter.apply(lambda x: pd.to_datetime(x) + dt.timedelta(hours=8))"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 25,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "x = 3\n",[m
[31m-    "def p():\n",[m
[31m-    "    print(x)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 31,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "2"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 31,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "x = '[2,3,5]'\n",[m
[31m-    "ast.literal_eval(x)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 26,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "3\n",[m
[31m-      "3\n"[m
[31m-     ][m
[31m-    },[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "3"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 26,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "print(x)\n",[m
[31m-    "p()\n",[m
[31m-    "x"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 113,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "def parse_mi_ho(df):\n",[m
[31m-    "    def NR_OTA():\n",[m
[31m-    "        if df[\"type_id\"].iloc[i] == \"5G_NR_RRC_OTA_Packet\":\n",[m
[31m-    "            return True\n",[m
[31m-    "        else:\n",[m
[31m-    "            return False\n",[m
[31m-    "\n",[m
[31m-    "    def find_1st_after(target, look_after=1):\n",[m
[31m-    "        for j in range(i, len(df)):\n",[m
[31m-    "            t_ = df[\"time\"].iloc[j]\n",[m
[31m-    "            if (t_ - t).total_seconds() > look_after:\n",[m
[31m-    "                return None, None\n",[m
[31m-    "            if df[target].iloc[j] not in [0,'0']:\n",[m
[31m-    "                return t_, j\n",[m
[31m-    "\n",[m
[31m-    "    def find_1st_before(target, look_before=1):\n",[m
[31m-    "        for j in range(i, -1, -1):\n",[m
[31m-    "            t_ = df[\"time\"].iloc[j]\n",[m
[31m-    "            if (t - t_).total_seconds() > look_before:\n",[m
[31m-    "                return None, None\n",[m
[31m-    "            if df[target].iloc[j] not in [0,'0']:\n",[m
[31m-    "                return t_, j\n",[m
[31m-    "\n",[m
[31m-    "    HO = namedtuple('HO','start, end, others', defaults=(None,None))\n",[m
[31m-    "\n",[m
[31m-    "    D = {\n",[m
[31m-    "        'Conn_Rel':[], \n",[m
[31m-    "        'Conn_Req':[], # Setup\n",[m
[31m-    "        'LTE_HO': [], # LTE -> newLTE\n",[m
[31m-    "        'MN_HO': [], # LTE + NR -> newLTE + NR\n",[m
[31m-    "        'SN_setup': [], # LTE -> LTE + NR => NR setup\n",[m
[31m-    "        'SN_Rel': [], # LTE + NR -> LTE\n",[m
[31m-    "        'SN_HO': [], # LTE + NR -> LTE + newNR\n",[m
[31m-    "        # 'HOF': [], # Didn't defined yet.\n",[m
[31m-    "        'RLF_II': [],\n",[m
[31m-    "        'RLF_III': [],\n",[m
[31m-    "        'SCG_RLF': [],\n",[m
[31m-    "        }\n",[m
[31m-    "\n",[m
[31m-    "    for i in range(len(df)):\n",[m
[31m-    "        if NR_OTA():\n",[m
[31m-    "            continue\n",[m
[31m-    "\n",[m
[31m-    "        t = df[\"time\"].iloc[i]\n",[m
[31m-    "        \n",[m
[31m-    "        if df[\"rrcConnectionRelease\"].iloc[i] == 1:\n",[m
[31m-    "            D['Conn_Rel'].append(HO(start=t))\n",[m
[31m-    "\n",[m
[31m-    "        if df[\"rrcConnectionRequest\"].iloc[i] == 1:\n",[m
[31m-    "            a = find_1st_after('rrcConnectionReconfigurationComplete',look_after=2)[0]\n",[m
[31m-    "            b = find_1st_after('securityModeComplete',look_after=2)[0]\n",[m
[31m-    "            end = a if a > b else b\n",[m
[31m-    "            D['Conn_Req'].append(HO(start=t,end=end))\n",[m
[31m-    "        \n",[m
[31m-    "        if df[\"lte-rrc.t304\"].iloc[i] == 1:\n",[m
[31m-    "            end, _ = find_1st_after('rrcConnectionReconfigurationComplete')\n",[m
[31m-    "            serv_cell, target_cell = df[\"PCI\"].iloc[i], df['lte_targetPhysCellId'].iloc[i]\n",[m
[31m-    "            serv_freq, target_freq = df[\"Freq\"].iloc[i], df['dl-CarrierFreq'].iloc[i]\n",[m
[31m-    "            if df[\"SCellToAddMod-r10\"].iloc[i] == 1:\n",[m
[31m-    "                n =len(str(df[\"SCellIndex-r10.1\"].iloc[i]).split('@'))\n",[m
[31m-    "                others=f'Set up {n} SCell.'\n",[m
[31m-    "            else:\n",[m
[31m-    "                others=None\n",[m
[31m-    "            \n",[m
[31m-    "            if serv_freq != target_freq:\n",[m
[31m-    "                others += \" Inter freq. HO\"\n",[m
[31m-    "            if df[\"nr-rrc.t304\"].iloc[i] == 1 and df[\"dualConnectivityPHR: setup (1)\"].iloc[i] == 1:\n",[m
[31m-    "                if serv_cell == target_cell and serv_freq == target_freq:\n",[m
[31m-    "                    D['eNB_to_ENDC'].append(HO(start=t, end=end, others=others))\n",[m
[31m-    "                    # print(1, t, f\"Serving Cell: {serv_cell}->{target_cell}\")  \n",[m
[31m-    "                else:    \n",[m
[31m-    "                    D['MN_HO'].append(HO(start=t, end=end, others=others))\n",[m
[31m-    "            else:\n",[m
[31m-    "                if serv_cell == target_cell and serv_freq == target_freq:\n",[m
[31m-    "                    a, b = find_1st_before(\"scgFailureInformationNR-r15\")\n",[m
[31m-    "                    if a is not None:\n",[m
[31m-    "                        others += \"Caused by scg-failure.\"\n",[m
[31m-    "                    D['gNB_Rel'].append(HO(start=t, end=end, others=others))\n",[m
[31m-    "                else:\n",[m
[31m-    "                    D['LTE_HO'].append(HO(start=t, end=end, others=others))\n",[m
[31m-    "\n",[m
[31m-    "        if df[\"nr-rrc.t304\"].iloc[i] == 1 and not df[\"dualConnectivityPHR: setup (1)\"].iloc[i] == 1:\n",[m
[31m-    "            end, _ = find_1st_after('rrcConnectionReconfigurationComplete')\n",[m
[31m-    "            D['gNB_HO'].append(HO(start=t,end=end))\n",[m
[31m-    "\n",[m
[31m-    "        if df[\"rrcConnectionReestablishmentRequest\"].iloc[i] == 1:\n",[m
[31m-    "            end, _ = find_1st_after('rrcConnectionReestablishmentComplete', look_after=1)\n",[m
[31m-    "            b, _ = find_1st_after('rrcConnectionReestablishmentReject', look_after=1)\n",[m
[31m-    "            others = df[\"reestablishmentCause\"].iloc[i]\n",[m
[31m-    "            if end is not None: \n",[m
[31m-    "                # Type II\n",[m
[31m-    "                D['RLF_II'].append(HO(start=t,end=end,others=others))\n",[m
[31m-    "            else: \n",[m
[31m-    "                # Type III\n",[m
[31m-    "                D['RLF_III'].append(HO(start=t,end=b,others=others)) # End for Type III?\n",[m
[31m-    "            \n",[m
[31m-    "        if df[\"scgFailureInformationNR-r15\"].iloc[i] == 1:\n",[m
[31m-    "            others = df[\"failureType-r15\"].iloc[i]\n",[m
[31m-    "            D['SCG_RLF'].append(HO(start=t,others=others))\n",[m
[31m-    "    \n",[m
[31m-    "    return D"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 115,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "A = parse_mi_ho(df)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 133,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "{'Conn_Rel': [HO(start=Timestamp('2022-12-22 15:19:25.390271'), end=None, others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:25:52.457582'), end=None, others=None)],\n",[m
[31m-       " 'Conn_Req': [HO(start=Timestamp('2022-12-22 15:19:56.591386'), end=Timestamp('2022-12-22 15:19:56.713021'), others=None)],\n",[m
[31m-       " 'LTE_HO': [HO(start=Timestamp('2022-12-22 15:19:57.061383'), end=Timestamp('2022-12-22 15:19:57.101553'), others='Set up 3 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:28.180037'), end=Timestamp('2022-12-22 15:21:28.208750'), others='Set up 3 SCell. Inter freq. HO'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:22:23.999133'), end=Timestamp('2022-12-22 15:22:24.031772'), others='Set up 2 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:23:41.733352'), end=Timestamp('2022-12-22 15:23:41.769395'), others='Set up 3 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:44.910368'), end=Timestamp('2022-12-22 15:24:44.946386'), others='Set up 3 SCell.')],\n",[m
[31m-       " 'MN_HO': [HO(start=Timestamp('2022-12-22 15:19:14.032084'), end=Timestamp('2022-12-22 15:19:14.058822'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:20:26.974650'), end=Timestamp('2022-12-22 15:20:26.991420'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:20:34.987508'), end=Timestamp('2022-12-22 15:20:35.005332'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:20:39.018799'), end=Timestamp('2022-12-22 15:20:39.035323'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:20:48.780163'), end=Timestamp('2022-12-22 15:20:48.797117'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:20:49.150474'), end=Timestamp('2022-12-22 15:20:49.167143'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:06.885801'), end=Timestamp('2022-12-22 15:21:06.904129'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:08.470194'), end=Timestamp('2022-12-22 15:21:08.487051'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:11.036728'), end=Timestamp('2022-12-22 15:21:11.076288'), others='Set up 1 SCell. Inter freq. HO'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:11.697090'), end=Timestamp('2022-12-22 15:21:11.713193'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:32.150377'), end=Timestamp('2022-12-22 15:21:32.166961'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:34.155257'), end=Timestamp('2022-12-22 15:21:34.171980'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:22:08.055277'), end=Timestamp('2022-12-22 15:22:08.071870'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:22:32.431841'), end=Timestamp('2022-12-22 15:22:32.448915'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:23:28.520871'), end=Timestamp('2022-12-22 15:23:28.537728'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:23:47.110325'), end=Timestamp('2022-12-22 15:23:47.127641'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:38.069416'), end=Timestamp('2022-12-22 15:24:38.087135'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:47.459140'), end=Timestamp('2022-12-22 15:24:47.475276'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:49.855438'), end=Timestamp('2022-12-22 15:24:49.872086'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:54.055355'), end=Timestamp('2022-12-22 15:24:54.070266'), others='Set up 1 SCell.')],\n",[m
[31m-       " 'eNB_to_ENDC': [HO(start=Timestamp('2022-12-22 15:19:15.187618'), end=Timestamp('2022-12-22 15:19:15.207854'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:19:56.907081'), end=Timestamp('2022-12-22 15:19:56.947775'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:19:57.546284'), end=Timestamp('2022-12-22 15:19:57.586656'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:18.265284'), end=Timestamp('2022-12-22 15:21:18.311377'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:28.405242'), end=Timestamp('2022-12-22 15:21:28.426514'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:40.299629'), end=Timestamp('2022-12-22 15:21:40.337536'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:22:24.254615'), end=Timestamp('2022-12-22 15:22:24.295553'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:23:42.146889'), end=Timestamp('2022-12-22 15:23:42.186789'), others='Set up 1 SCell.'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:45.274409'), end=Timestamp('2022-12-22 15:24:45.316392'), others='Set up 1 SCell.')],\n",[m
[31m-       " 'gNB_Rel': [HO(start=Timestamp('2022-12-22 15:21:16.457800'), end=Timestamp('2022-12-22 15:21:16.493833'), others='Set up 3 SCell.')],\n",[m
[31m-       " 'gNB_HO': [HO(start=Timestamp('2022-12-22 15:20:10.182948'), end=Timestamp('2022-12-22 15:20:10.199359'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:20:25.803919'), end=Timestamp('2022-12-22 15:20:25.820452'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:31.465596'), end=Timestamp('2022-12-22 15:21:31.483267'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:22:06.892612'), end=Timestamp('2022-12-22 15:22:06.908990'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:22:33.195448'), end=Timestamp('2022-12-22 15:22:33.212767'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:23:27.656307'), end=Timestamp('2022-12-22 15:23:27.674319'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:39.726810'), end=Timestamp('2022-12-22 15:24:39.743316'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:44.830043'), end=Timestamp('2022-12-22 15:24:44.845314'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:50.631738'), end=Timestamp('2022-12-22 15:24:50.648053'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:24:54.836732'), end=Timestamp('2022-12-22 15:24:54.851904'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:25:25.687641'), end=Timestamp('2022-12-22 15:25:25.703770'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:25:28.978817'), end=Timestamp('2022-12-22 15:25:28.996303'), others=None),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:25:31.879585'), end=Timestamp('2022-12-22 15:25:31.897500'), others=None)],\n",[m
[31m-       " 'RLF_II': [HO(start=Timestamp('2022-12-22 15:19:14.910143'), end=Timestamp('2022-12-22 15:19:14.980754'), others='otherFailure (2)'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:17.388765'), end=Timestamp('2022-12-22 15:21:17.473298'), others='otherFailure (2)'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:27.319390'), end=Timestamp('2022-12-22 15:21:27.390316'), others='otherFailure (2)'),\n",[m
[31m-       "  HO(start=Timestamp('2022-12-22 15:21:40.008372'), end=Timestamp('2022-12-22 15:21:40.086385'), others='otherFailure (2)')],\n",[m
[31m-       " 'RLF_III': [],\n",[m
[31m-       " 'SCG_RLF': [HO(start=Timestamp('2022-12-22 15:21:39.315687'), end=None, others='t310-Expiry (0)')]}"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 133,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "A"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 50,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "f1 = \"/home/wmnlab/test1.csv\"\n",[m
[31m-    "f2 = \"/home/wmnlab/test2.csv\"\n",[m
[31m-    "f3 = \"/home/wmnlab/test3.csv\"\n",[m
[31m-    "df1 = pd.read_csv(f1)\n",[m
[31m-    "df1[\"Timestamp\"] = df1[\"Timestamp\"].swifter.apply(lambda x: pd.to_datetime(x))\n",[m
[31m-    "df2 = pd.read_csv(f2)\n",[m
[31m-    "df2[\"Timestamp\"] = df2[\"Timestamp\"].swifter.apply(lambda x: pd.to_datetime(x))\n",[m
[31m-    "df3 = pd.read_csv(f3)\n",[m
[31m-    "df3[\"Timestamp\"] = df3[\"Timestamp\"].swifter.apply(lambda x: pd.to_datetime(x))"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 51,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "a = list(df1[\"lat\"])\n",[m
[31m-    "b = list(df3[\"lat\"])\n",[m
[31m-    "# c = "[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 100,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "def correlations(a, b):\n",[m
[31m-    "    length = len(a) if len(a)<len(b) else len(b)\n",[m
[31m-    "    if length == len(a):\n",[m
[31m-    "        return np.corrcoef(a,b[:len(a)])\n",[m
[31m-    "    else:\n",[m
[31m-    "        return np.corrcoef(a[:len(b)],b)\n",[m
[31m-    "\n",[m
[31m-    "def gps_leg_corres(a, b, search=30): \n",[m
[31m-    "    corres = []\n",[m
[31m-    "    legs = list(range(-search,search+1))\n",[m
[31m-    "    for i in range(-search,search+1):\n",[m
[31m-    "        if i<0:\n",[m
[31m-    "            corres.append(correlations(a[-i:], b[:])[0,1])\n",[m
[31m-    "        else:\n",[m
[31m-    "            corres.append(correlations(a[:], b[i:])[0,1])\n",[m
[31m-    "    index_max = max(range(len(corres)), key=corres.__getitem__)\n",[m
[31m-    "\n",[m
[31m-    "    return legs[index_max]\n"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 101,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "x = gps_leg_corres(a,b)"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 103,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [],[m
[31m-   "source": [[m
[31m-    "if x < 0:\n",[m
[31m-    "    x1 = list(df1[\"DL-lat\"].iloc[-x:])\n",[m
[31m-    "    x2 = list(df3[\"DL-lat\"].iloc[:])\n",[m
[31m-    "else:\n",[m
[31m-    "    x1 = list(df1[\"DL-lat\"].iloc[:])\n",[m
[31m-    "    x2 = list(df3[\"DL-lat\"].iloc[x:])"[m
[31m-   ][m
[31m-  },[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 109,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "text/plain": [[m
[31m-       "[<matplotlib.lines.Line2D at 0x7fdd9fb8c670>]"[m
[31m-      ][m
[31m-     },[m
[31m-     "execution_count": 109,[m
[31m-     "metadata": {},[m
[31m-     "output_type": "execute_result"[m
[31m-    },[m
[31m-    {[m
[31m-     "data": {[m
[31m-      "image/png": "